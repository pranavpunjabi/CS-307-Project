New commands to test database - 

run the code by typing 
$ python run.py

Search by location : 
(NOT IN USE) -------- curl -i -H "Content-Type: application/json" -X GET -d '{"latitude":"40.425869", "longitude":"-86.908066}' http://localhost:5000/server/locSearch

edit info:curl -i --ipv4 -H "Content-type: application/json" -X POST -d '{"id":"1","lastname":"vijay","firstname":"bssala","emil":"isdads@purdue.edu"}' http://localhost:5000/server/editInfo

unregister tutor :curl -i --ipv4 -H "Content-type: application/json" -X POST -d '{"id":"3"}' http://localhost:5000/server/untutor

Search by location + subjects + ratings: 
curl -i -H "Content-type: application/json" -X GET http://localhost:5000/server/search?"latitude=40.42&longitude=-86.9&subject=math&subject=chem&rating=0"

Search by specific location:
curl -i -H "Content-type: application/json" -X GET http://localhost:5000/server/search?"latitude=40.42&longitude=-86.9&subject=mathematics&rating=0&zipcode=47908"

Rate tutor: curl --ipv4 -i -H "Content-Type: application/json" -X POST -d '{"tutID":"1", "stuID":"36", "ratings":"2", "reviews":"no problem"}' http://localhost:5000/server/ratings

(NOT IN USE) -------- Add tutor location: curl -i -H "Content-type: application/json" -X POST -d '{"id":"1", "location":"47906"}' http://localhost:5000/server/addtutorlocation

//rating table created and tutor table has two extra columns. SEE BELOW for DETAILS

Add favorites for a student: curl -i -H "Content-type: application/json" -X POST -d '{"studentID":"1", "tutorID":"2"}' http://localhost:5000/server/addfavorites

Get favorites for a student: curl -i -H "Content-type: application/json" -X GET http://localhost:5000/server/getfavorites?"studentID=1"

Testing database connection: curl -i http://localhost:5000/testdb (returns ({'return':'success'}) in json format)

Add new user : curl -i -H "Content-Type: application/json" -X POST -d '{"requestType":"signUp", "firstName":"arun", "lastName":"kumar", "email":"srivas15@purdue.edu", "password":"hello"}' http://localhost:5000/server/index

Sign-in user : curl -i -H "Content-Type: application/json" -X GET -d '{"requestType":"signIn","firstName":"asad", "lastName":"kumar", "email":"srivas5@purdue.edu", "password":"hello"}' http://localhost:5000/server/index

Sign-up user as a tutor:
curl --ipv4 -i -H "Content-Type: application/json" -X GET http://localhost:5000/server/getTutor?"id=1"

Add subjects for a particular tutor in the tutor and subjects tables: curl -i -H "Content-Type: application/json" -X POST -d '{"id":"1","location":"47906","subjects":[{"subject":"chem"}, {"subject":"phy"}]}' http://localhost:5000/server/addSubjects

(NOT IN USE) ------------------- Test query : curl -i -H "Content-Type: application/json" -X GET -d '{"firstName":"arun"}' http://localhost:5000/server/test (Changed - not updated)
NOTE : make sure you have at least 3 or more students with the same first name arun for the original code to work. You can change the code to test it accordingly. It's a small fix.

Get subjects for a particular tutor: curl -i -H "Content-Type: application/json" -X GET -d '{"id":"3"}' http://localhost:5000/server/getSubjects

Add new user and Sign-in return success as well as the ID number of the corresponding user.

Sign-up user as a tutor returns success or 'student with this ID has not been registered'.


-------------------------------------

Create new user with the database

check mysql version by typing 
$ mysql --version
login with the root
$ mysql -u root
$ <leave password blank on prompt>
$ CREATE USER 'sharoons'@'localhost' IDENTIFIED BY 'password';
$ GRANT ALL PRIVILEGES ON * . * TO 'sharoons'@'localhost';
$ exit

Now log in with this user

$ mysql -u sharoons -p
$ <enter password on prompt, password is 'password' without quotes>
$ create database GetGuru; 
$ use GetGuru; <change the current database to GetGuru>
$ create table allusers (
uid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
firstname VARCHAR(100) NOT NULL,
lastname VARCHAR(100) NOT NULL,
email VARCHAR(120) NOT NULL UNIQUE,
pwdhash VARCHAR(100) NOT NULL
);
$ describe allusers; <just to see if it has been created properly or not>
$ exit

Note: You can use any username and password to create this. You can also use any database name. Make sure you change the required fields in __init__.py file
example for user: 'amit' password: 'alright' and database 'development'

myApp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://amit:alright@localhost/development' <change to this in __init__.py>

Similarly you can also use a separate table name and change the required fields in models.py

ITS PREFERED TO KEEP IT THE SAME USER NAME AND PASSWORD <sharoons:password> AND DATABASE <GetGuru> SO WE DONT HAVE TO CHANGE OUR CODE EVERYTIME WE PUSH/PULL
_____________________________________

Check if the data has been stored correctly or not

mysql info - 
username: sharoons 
password : password

using database 'GetGuru'
using table 'allusers' (already created before running the server with columns uid and name)

can view this table and see the new user data stored. 
login by typing 
$ mysql -u sharoons -p
$ <enter password on prompt, password is 'password' without quotes>
$ use GetGuru; <switches to desired database>
$ show tables; <shows all tables>
$ describe allusers; <shows the columns of the table>
$ SELECT * FROM allusers; <shows all information stored in the table>
$ exit

just google mysql commands and you'll find plenty of resources



//to delete any table
DROP TABLE table_name;


//to create student table with primary key being the stuID
create table students (
id int not null primary key auto_increment,
lastname varchar(100) not null,
firstname varchar(100) not null,
email varchar(120) not null unique,
pwdhash varchar(100) not null,
ifTutor boolean NOT NULL default 0
);
alter table student add column favorites varchar(1000) after ifTutor;

//to create a subject table
create table subjects( 
subject varchar(100) not null unique,
ids varchar(100) not null);

//create tutor table
create table tutors(
id int not null unique primary key,
location int, 
subjects varchar(100)
avgRatings double
ratingCount int
);
//if you already have a table you can add the column using 
alter table tutors add column location varchar(100) after id;
alter table tutors add column avgRatings double after subjects;
alter table tutors add column ratingCount int after avgRatings;


//create rating table
create table rating(
tutID int 
stuID int
PRIMARY KEY(tutID,stuID)
ratings int
reviews varchar(300)
);
